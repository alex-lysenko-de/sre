import { defineStore } from 'pinia'
import { supabase } from '../supabase'

const CONFIG_CACHE_KEY = 'app_config_cache'
const CONFIG_CACHE_TTL = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç

// –¢–∏–ø—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
const CONFIG_KEYS = {
    YEAR: 'year',
    PUBLIC_PHONE_NUMBER: 'public_phone_number',
    TOTAL_GROUPS: 'total_groups',
    TOTAL_BUSES: 'total_buses',
    BASE_URL: 'base_url',
    ANKUNFTSZEIT: 'ankunftszeit',
    ABFAHRTSZEIT: 'abfahrtszeit'
}

export const useConfigStore = defineStore('config', {
    state: () => ({
        configData: {},
        loading: false,
        error: null,
        lastFetch: 0,
        isAdmin: false,
        subscription: null
    }),

    getters: {
        // ==================== –°–¢–ê–†–´–ï –ì–ï–¢–¢–ï–†–´ (DEPRECATED) ====================
        /**
         * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
         */
        config: (state) => state.configData,

        /**
         * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getConfigValueSafe() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
         */
        getConfigValue: (state) => (key) => state.configData[key],

        // ==================== –ù–û–í–´–ï –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ì–ï–¢–¢–ï–†–´ ====================
        /**
         * –ì–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
         */
        year: (state) => state.configData[CONFIG_KEYS.YEAR],

        /**
         * –ü—É–±–ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
         */
        publicPhoneNumber: (state) => state.configData[CONFIG_KEYS.PUBLIC_PHONE_NUMBER],

        /**
         * –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —á–∏—Å–ª–æ)
         */
        totalGroups: (state) => parseInt(state.configData[CONFIG_KEYS.TOTAL_GROUPS]) || 0,

        /**
         * –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–±—É—Å–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —á–∏—Å–ª–æ)
         */
        totalBuses: (state) => parseInt(state.configData[CONFIG_KEYS.TOTAL_BUSES]) || 0,

        /**
         * –ë–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
         */
        baseUrl: (state) => state.configData[CONFIG_KEYS.BASE_URL],

        /**
         * –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '17:00')
         */
        ankunftszeit: (state) => state.configData[CONFIG_KEYS.ANKUNFTSZEIT],

        /**
         * –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '08:30')
         */
        abfahrtszeit: (state) => state.configData[CONFIG_KEYS.ABFAHRTSZEIT],

        // ==================== –°–¢–ê–†–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ====================
        isLoading: (state) => state.loading,
        hasError: (state) => state.error !== null
    },

    actions: {
        // ==================== –°–¢–ê–†–´–ï –ú–ï–¢–û–î–´ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê) ====================
        async fetchFromSupabase() {
            this.loading = true
            const { data, error: err } = await supabase.from('config').select('*').order('sort_order', { ascending: true })
            this.loading = false

            if (err) {
                console.error('Fehler beim Laden der Konfiguration:', err.message)
                this.error = err
                return null
            }

            const result = Object.fromEntries(data.map((i) => [i.key, i.value]))
            this.configData = result
            localStorage.setItem(CONFIG_CACHE_KEY, JSON.stringify({ data: result, timestamp: Date.now() }))
            this.lastFetch = Date.now()
            return result
        },

        async loadConfig(force = false) {
            const cached = localStorage.getItem(CONFIG_CACHE_KEY)
            const now = Date.now()

            if (!force && cached) {
                const { data, timestamp } = JSON.parse(cached)
                if (now - timestamp < CONFIG_CACHE_TTL) {
                    this.configData = data
                    return data
                }
            }

            return await this.fetchFromSupabase()
        },

        async updateConfig(key, value) {
            if (!this.isAdmin) throw new Error('Unzureichende Rechte zur √Ñnderung der Konfiguration')

            const { error: err } = await supabase
                .from('config')
                .update({ value, updated_at: new Date().toISOString() })
                .eq('key', key)

            if (err) throw err

            this.configData[key] = value
            localStorage.setItem(CONFIG_CACHE_KEY, JSON.stringify({ data: this.configData, timestamp: Date.now() }))
        },

        subscribeToRealtime() {
            if (this.subscription) return

            this.subscription = supabase
                .channel('public:config')
                .on('postgres_changes', { event: '*', schema: 'public', table: 'config' }, async () => {
                    console.log('‚ö° Konfigurations-Update √ºber WebSocket empfangen')
                    await this.fetchFromSupabase()
                })
                .subscribe((status) => console.log('üì° Realtime-Status:', status))
        },

        unsubscribeFromRealtime() {
            if (this.subscription) {
                supabase.removeChannel(this.subscription)
                this.subscription = null
            }
        },

        async initConfigModule() {
            const { data: { user } } = await supabase.auth.getUser()

            if (user) {
                // Get the actual role from the users table
                const { data: userData } = await supabase
                    .from('users')
                    .select('role')
                    .eq('user_id', user.id)
                    .single()

                this.isAdmin = userData?.role === 'admin'
            } else {
                this.isAdmin = false
            }

            await this.loadConfig()
            this.subscribeToRealtime()
        },

        // ==================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ ====================

        /**
         * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
         * @param {string} key - –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
         * @param {*} defaultValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
         * @returns {*} –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
         */
        getConfigValueSafe(key, defaultValue = null) {
            return this.configData[key] ?? defaultValue
        },

        /**
         * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
         * @param {string} key - –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
         * @param {number} defaultValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
         * @returns {number} –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
         */
        getConfigAsNumber(key, defaultValue = 0) {
            const value = this.configData[key]
            const parsed = parseInt(value)
            return isNaN(parsed) ? defaultValue : parsed
        },

        /**
         * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
         * @returns {boolean} true, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
         */
        isConfigLoaded() {
            return Object.keys(this.configData).length > 0
        },

        /**
         * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ –∫–µ—à–∞)
         * @returns {object} –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
         */
        getAllConfig() {
            return { ...this.configData }
        },

        /**
         * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
         */
        clearCache() {
            try {
                localStorage.removeItem(CONFIG_CACHE_KEY)
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:', e)
            }
        }
    }
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { CONFIG_KEYS }