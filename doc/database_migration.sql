-- =========================================
-- DATABASE MIGRATION FOR STADTRANDERHOLUNG
-- =========================================

-- 1. Create c_bands table (Bracelets)
CREATE TABLE IF NOT EXISTS public.c_bands (
                                              id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                              code TEXT NOT NULL UNIQUE,
                                              label TEXT,
                                              active BOOLEAN DEFAULT TRUE,
                                              created_at TIMESTAMPTZ DEFAULT NOW()
    );

CREATE INDEX IF NOT EXISTS idx_c_bands_code ON public.c_bands USING BTREE(code);

COMMENT ON TABLE public.c_bands IS 'Armb채nder f체r Kinder';
COMMENT ON COLUMN public.c_bands.code IS 'QR-Code Nummer (z.B. "001", "100")';

-- 2. Create groups table
CREATE TABLE IF NOT EXISTS public.groups (
                                             id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                             name TEXT NOT NULL,
                                             created_at TIMESTAMPTZ DEFAULT NOW()
    );

COMMENT ON TABLE public.groups IS 'Kindergruppen';

-- Insert default groups
INSERT INTO public.groups (name) VALUES
                                     ('Gruppe A'),
                                     ('Gruppe B'),
                                     ('Gruppe C')
    ON CONFLICT DO NOTHING;

-- 3. Create children table
CREATE TABLE IF NOT EXISTS public.children (
                                               id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                               created_at TIMESTAMPTZ DEFAULT NOW(),
    name VARCHAR NOT NULL,
    age SMALLINT DEFAULT 0,
    schwimmer BOOLEAN DEFAULT FALSE,
    status SMALLINT DEFAULT 0,
    notes TEXT DEFAULT '',
    group_id BIGINT REFERENCES public.groups(id) ON DELETE SET NULL,
    band_id BIGINT REFERENCES public.c_bands(id) ON UPDATE CASCADE ON DELETE SET NULL
    );

CREATE INDEX IF NOT EXISTS idx_children_band_id ON public.children(band_id);
CREATE INDEX IF NOT EXISTS idx_children_group_id ON public.children(group_id);

COMMENT ON TABLE public.children IS 'Kinder der Stadtranderholung';
COMMENT ON COLUMN public.children.schwimmer IS 'Kann das Kind schwimmen?';

-- 4. Create scan_type table
CREATE TABLE IF NOT EXISTS public.scan_type (
                                                id SMALLINT PRIMARY KEY,
                                                name TEXT NOT NULL
);

-- Insert scan types
INSERT INTO public.scan_type (id, name) VALUES
                                            (1, 'present'),
                                            (2, 'bus_in'),
                                            (3, 'bus_out')
    ON CONFLICT (id) DO NOTHING;

COMMENT ON TABLE public.scan_type IS 'Typen von Scans';

-- 5. Create scans table
CREATE TABLE IF NOT EXISTS public.scans (
                                            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            created_at TIMESTAMPTZ DEFAULT NOW(),
    date VARCHAR NOT NULL,
    user_id BIGINT REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE SET NULL,
    child_id BIGINT REFERENCES public.children(id) ON UPDATE CASCADE ON DELETE CASCADE,
    band_id BIGINT REFERENCES public.c_bands(id) ON UPDATE CASCADE ON DELETE SET NULL,
    bus_id SMALLINT NULL,
    type SMALLINT REFERENCES public.scan_type(id) ON UPDATE CASCADE ON DELETE SET NULL,
    extra JSONB NULL
    );

CREATE INDEX IF NOT EXISTS idx_scans_child_date ON public.scans(child_id, date);
CREATE INDEX IF NOT EXISTS idx_scans_date ON public.scans(date);
CREATE INDEX IF NOT EXISTS idx_scans_created_at ON public.scans(created_at DESC);

COMMENT ON TABLE public.scans IS 'Scan-Aufzeichnungen f체r Anwesenheit';
COMMENT ON COLUMN public.scans.date IS 'Datum im Format YYYY-MM-DD';

-- 6. Create days table
CREATE TABLE IF NOT EXISTS public.days (
                                           id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                           created_at TIMESTAMPTZ DEFAULT NOW(),
    date VARCHAR UNIQUE,
    name VARCHAR,
    abfahrt TIME,
    ankommen TIME,
    description TEXT
    );

CREATE INDEX IF NOT EXISTS idx_days_date ON public.days(date);

COMMENT ON TABLE public.days IS 'Besondere Tage und Zeitpl채ne';

-- 7. Enable Row Level Security (RLS)
ALTER TABLE public.c_bands ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.children ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.scans ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.groups ENABLE ROW LEVEL SECURITY;

-- RLS Policies for c_bands
CREATE POLICY "Allow authenticated users to read bands"
  ON public.c_bands FOR SELECT
                                   TO authenticated
                                   USING (true);

CREATE POLICY "Allow admins to manage bands"
  ON public.c_bands FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.users
      WHERE users.user_id = auth.uid()
      AND users.role = 'admin'
      AND users.active = true
    )
  );

-- RLS Policies for children
CREATE POLICY "Allow authenticated users to read children"
  ON public.children FOR SELECT
                                           TO authenticated
                                           USING (true);

CREATE POLICY "Allow authenticated active users to manage children"
  ON public.children FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.users
      WHERE users.user_id = auth.uid()
      AND users.active = true
    )
  );

-- RLS Policies for scans
CREATE POLICY "Allow authenticated users to read scans"
  ON public.scans FOR SELECT
                                        TO authenticated
                                        USING (true);

CREATE POLICY "Allow authenticated active users to insert scans"
  ON public.scans FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.users
      WHERE users.user_id = auth.uid()
      AND users.active = true
    )
  );

-- RLS Policies for groups
CREATE POLICY "Allow authenticated users to read groups"
  ON public.groups FOR SELECT
                                         TO authenticated
                                         USING (true);

CREATE POLICY "Allow admins to manage groups"
  ON public.groups FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.users
      WHERE users.user_id = auth.uid()
      AND users.role = 'admin'
      AND users.active = true
    )
  );

-- =========================================
-- Sample data for testing (optional)
-- =========================================

-- Insert sample bands
INSERT INTO public.c_bands (code, label, active) VALUES
                                                     ('001', 'Band #1', true),
                                                     ('002', 'Band #2', true),
                                                     ('003', 'Band #3', true),
                                                     ('100', 'Band #100', true)
    ON CONFLICT (code) DO NOTHING;

-- =========================================
-- End of migration
-- =========================================